using Unity;
using Unity.Resolution;

namespace ConsoleMitDI
{
    public static class UnityExtensions
    {
        public static TOut Resolve<TOut, TIn1>(this IUnityContainer container, TIn1 tIn1) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1));
        public static TOut Resolve<TOut, TIn1, TIn2>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, TIn6 tIn6) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5), new ParameterOverride(typeof(TIn6), tIn6));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, TIn6 tIn6, TIn7 tIn7) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5), new ParameterOverride(typeof(TIn6), tIn6), new ParameterOverride(typeof(TIn7), tIn7));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, TIn6 tIn6, TIn7 tIn7, TIn8 tIn8) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5), new ParameterOverride(typeof(TIn6), tIn6), new ParameterOverride(typeof(TIn7), tIn7), new ParameterOverride(typeof(TIn8), tIn8));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, TIn6 tIn6, TIn7 tIn7, TIn8 tIn8, TIn9 tIn9) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5), new ParameterOverride(typeof(TIn6), tIn6), new ParameterOverride(typeof(TIn7), tIn7), new ParameterOverride(typeof(TIn8), tIn8), new ParameterOverride(typeof(TIn9), tIn9));
        public static TOut Resolve<TOut, TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(this IUnityContainer container, TIn1 tIn1, TIn2 tIn2, TIn3 tIn3, TIn4 tIn4, TIn5 tIn5, TIn6 tIn6, TIn7 tIn7, TIn8 tIn8, TIn9 tIn9, TIn10 tIn10) => container.Resolve<TOut>(new ParameterOverride(typeof(TIn1), tIn1), new ParameterOverride(typeof(TIn2), tIn2), new ParameterOverride(typeof(TIn3), tIn3), new ParameterOverride(typeof(TIn4), tIn4), new ParameterOverride(typeof(TIn5), tIn5), new ParameterOverride(typeof(TIn6), tIn6), new ParameterOverride(typeof(TIn7), tIn7), new ParameterOverride(typeof(TIn8), tIn8), new ParameterOverride(typeof(TIn9), tIn9), new ParameterOverride(typeof(TIn10), tIn10));
    }
}